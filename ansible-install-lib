ANSIBLE_VER=4.10.0

# install_pip /usr/bin/python => /usr/bin/python /usr/local/bin/get-pip.py
install_pip () {
    local python_interpreter=$1
    local url=https://bootstrap.pypa.io/get-pip.py
    local getpippy=/tmp/get-pip.py

    echo downloading from $url to $getpippy...
    wget -O $getpippy $url

    echo installing with $python_interpreter...
    $python_interpreter $getpippy
    rm $getpippy
}

install_pip_archlinux () {
    pacman \
        -Syu \
        --noconfirm \
        python-pip
    pip install --upgrade pip
}

install_pip_fedora () {
    local os_ver=$1
    local pip=$2

    if [ "$os_ver" -ge "29" ];
    then
        dnf install -y python3-pip
    else
        dnf install -y python-pip
        $pip install --upgrade pip
    fi
}

install_pip_ubuntu () {
    install_pip $1
}

install_pip_debian () {
    install_pip $1
}

install_pip_alpine () {
    install_pip $1
}

pip_install () {
    local pip=$1
    local pkgs=$2
    $pip install --no-cache-dir $pkgs
}

# pip_install_ansible pip3 2.8.4 => pip3 install ansible==2.8.4
pip_install_ansible () {
    local pip=$1
    local ansible_ver=$2
    pip_install $pip ansible==$ansible_ver
}

ansible_ping_localhost () {
    ansible-galaxy install -r requirements.yml
    ansible --version \
        && ansible all --list-hosts \
        && ansible localhost -m ping
}

write_local_cfg () {
    mkdir -p /etc/ansible
    cat >/etc/ansible/ansible.cfg <<HERE
[defaults]
inventory = /etc/ansible/inventories
transport = local
callbacks_enabled = ansible.posix.timer,ansible.posix.profile_tasks
HERE
}

write_inventories () {
    local os_group_name=$1
    local ansible_python_interpreter=$2

    mkdir -p /etc/ansible/inventories
    cat >/etc/ansible/inventories/localhost <<HERE
localhost

[$os_group_name]
localhost

[$os_group_name:vars]
ansible_python_interpreter=$ansible_python_interpreter
HERE
}

write_dockerfile () {
    local upstream_registry=$1
    local upstream_namespace=$2
    local upstream_repo=$3

    local os=$4
    local os_ver=$5

    local fq_upstream=${upstream_registry}/${upstream_namespace}/${upstream_repo}:${os_ver}
    if [ "${upstream_namespace}" = "" ];
    then
        fq_upstream=${upstream_registry}/${upstream_repo}:${os_ver}
    fi

    dockerfile=Dockerfile.${os}_${os_ver}
    echo writing Dockerfile: $dockerfile
    cat > $dockerfile <<EOF
FROM $fq_upstream
MAINTAINER "Andrew Rothstein" andrew.rothstein@gmail.com

ADD ansible-install-lib ansible-install-lib
ADD install.sh install.sh
ADD requirements.yml requirements.yml
RUN ./install.sh ${os} ${os_ver}
EOF
}

write_dockerfile_simple () {
    local os=$1
    local os_ver=$2
    write_dockerfile docker.io library $os $os $os_ver
}

write_dockerfile_alpine () {
    write_dockerfile_simple alpine $1
}

write_dockerfile_archlinux () {
    write_dockerfile_simple archlinux $1
}

write_dockerfile_rockylinux () {
    write_dockerfile_simple rockylinux $1
}

write_dockerfile_debian () {
    write_dockerfile_simple debian $1
}

write_dockerfile_ubuntu () {
    write_dockerfile_simple ubuntu $1
}

write_dockerfile_fedora () {
    write_dockerfile_simple fedora $1
}

PYTHON_MIRROR=https://www.python.org/ftp/python
install_python () {
    local python_ver=$1
    local python_name=Python-$python_ver
    local python_tgz=${python_name}.tgz
    wget $PYTHON_MIRROR/$python_ver/$python_tgz
    tar zxvf $python_tgz
    cd $python_name
    ./configure --enable-optimizations
    make altinstall
    cd ..
    rm -rf $python_tgz $python_name
}

install_fq_pre_dnf() {
    dnf update -y
    dnf install -y wget ${1:-python3}
}

install_fq_pre_yum() {
    yum update -y
    yum install -y wget ${1:-python3}
}

install_fq_pre_fedora () {
    local os_ver=$1
    dnf update -y
    dnf install -y systemd

    if [ "$os_ver" -ge "29" ];
    then
        install_fq_pre_dnf
    else
        install_fq_pre_dnf python
    fi
}

install_fq_post_yum() {
    yum clean all
}

install_fq_post_dnf() {
    dnf clean all
}

install_fq_post_fedora () {
    install_fq_post_dnf
}

install_fq_pre_alpine () {
    apk update
    apk upgrade
    apk add \
        python3 \
        python3-dev \
        build-base \
        libffi-dev \
        openssl-dev \
        wget \
        ca-certificates \
        rust \
        cargo
}

install_fq_post_alpine () {
    apk del \
        build-base \
        libffi-dev \
        openssl-dev \
        rust \
        cargo
    rm -rf /var/cache/apk/*
}

install_fq_pre_ubuntu () {
    os_ver=$1
    python_pkg=$2
    apt-get update -y
    apt-get upgrade -y
    apt-get \
        install -y \
        wget \
        $python_pkg \
        "${python_pkg}-distutils" \
        language-pack-en
}

install_fq_post_ubuntu () {
    apt-get clean -y
}

install_fq_pre_archlinux () {
    pacman \
        -Syu \
        --noconfirm \
        glibc \
        python \
        ca-certificates \
        libffi
}

install_fq_pre_debian () {
    local os_ver=$1
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y wget

    if [ "$os_ver" = "jessie" ];
    then
        apt-get install -y python
    elif [ "$os_ver" = "stretch" ];
    then
        apt-get install -y python3
    else
        apt-get install -y python3 python3-distutils
    fi
}

install_fq_post_debian () {
    apt-get clean
}

install_fq_fedora () {
    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4

    install_fq_pre_fedora $os_ver

    install_pip_fedora $os_ver $pip
    pip_install_ansible $pip $ansible_ver

    install_fq_post_fedora

    write_local_cfg
    write_inventories fedora $python_interpreter
    ansible_ping_localhost
}

install_fq_archlinux () {
    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4

    install_fq_pre_archlinux

    install_pip_archlinux $python_interpreter
    pip_install_ansible $pip $ansible_ver

    write_local_cfg
    write_inventories archlinux $python_interpreter
    ansible_ping_localhost
}

install_fq_ubuntu () {

    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4
    local python_pkg=$5

    install_fq_pre_ubuntu $os_ver $python_pkg

    install_pip_ubuntu $python_interpreter
    pip_install_ansible $pip $ansible_ver

    install_fq_post_ubuntu

    write_local_cfg
    write_inventories ubuntu $python_interpreter
    ansible_ping_localhost
}

install_fq_debian () {

    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4

    install_fq_pre_debian $os_ver

    install_pip_debian $python_interpreter
    pip_install_ansible $pip $ansible_ver

    install_fq_post_debian

    write_local_cfg
    write_inventories debian $python_interpreter
    ansible_ping_localhost
}

install_fq_rockylinux () {
    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4

    install_fq_pre_dnf python39

    install_pip $python_interpreter
    pip_install_ansible $pip $ansible_ver

    install_fq_post_dnf

    write_local_cfg
    write_inventories rockylinux $python_interpreter
    ansible_ping_localhost
}

install_fq_alpine () {
    local os_ver=$1
    local python_interpreter=$2
    local pip=$3
    local ansible_ver=$4

    install_fq_pre_alpine

    install_pip_alpine $python_interpreter
    pip_install_ansible $pip $ansible_ver

    install_fq_post_alpine

    write_local_cfg
    write_inventories alpine $python_interpreter
    ansible_ping_localhost
}

install_debian () {
    local os_ver=$1
    install_fq_debian $os_ver /usr/bin/python3 pip3 $ANSIBLE_VER
}

install_fedora () {
    local os_ver=$1
    install_fq_fedora $os_ver /usr/bin/python3 pip3 $ANSIBLE_VER
}

install_archlinux () {
    local os_ver=$1
    install_fq_archlinux $os_ver /usr/sbin/python pip $ANSIBLE_VER
}

install_ubuntu () {
    local os_ver=$1
    local python_pkg=python3
    if [ "$os_ver" = "bionic" ];
    then
        python_pkg=python3.8
    elif [ "$os_ver" = "focal" ];
    then
        python_pkg=python3.9
    elif [ "$os_ver" = "jammy" ];
    then
        python_pkg=python3.10
    fi
    install_fq_ubuntu $os_ver /usr/bin/${python_pkg} pip3 $ANSIBLE_VER $python_pkg
}

install_rockylinux () {
    local os_ver=$1
    install_fq_rockylinux $os_ver /usr/bin/python3 pip3 $ANSIBLE_VER
}

install_alpine () {
    local os_ver=$1
    install_fq_alpine $os_ver /usr/bin/python3 pip $ANSIBLE_VER
}

docker_build_and_tag() {
    local df=$1
    local n=$2
    local t=$3
    docker build \
           -f $df \
           --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY \
           --build-arg http_proxy --build-arg https_proxy --build-arg no_proxy \
           -t $n \
           .
    docker tag $n $t
}

buildah_build_and_tag() {
    local df=$1
    local n=$2
    local t=$3
    sudo \
        buildah \
        bud \
        -f $df \
        --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY \
        --build-arg http_proxy --build-arg https_proxy --build-arg no_proxy \
        -t $n \
        .

    sudo \
        buildah \
        tag \
        $n $t
}
