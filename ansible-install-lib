#!/bin/sh

# useful package manager functions
pacman_install() {
    pacman \
        -Syu \
        --noconfirm \
        $@
}

pacman_clean() {
    pacman -Sc
}

dnf_install() {
    dnf install -y $@
}

dnf_up() {
    dnf update -y
}

dnf_clean() {
    dnf clean all
}

dnf_remove() {
    dnf remove -y $@
}

apt_install() {
    apt install -y $@
}

apt_remove() {
    apt remove -y $@
}

apt_up() {
    apt update -y
    apt upgrade -y
}

apt_clean() {
    apt-get clean -y
}

apk_add () {
    apk add $@
}

apk_del () {
    apk del $@
}

apk_clean () {
    rm -rf /var/cache/apk/*
}

apk_up () {
    apk update
    apk upgrade
}

pip_install () {
    python3 \
        -m pip \
        install \
        --no-cache-dir \
        --upgrade \
        $@
}

ansible_ping_localhost () {
    ansible-galaxy install -r requirements.yml
    ansible --version \
        && ansible all --list-hosts \
        && ansible localhost -m ping
}

write_local_cfg () {
    mkdir -p /etc/ansible
    cat >/etc/ansible/ansible.cfg <<HERE
[defaults]
inventory = /etc/ansible/inventories
transport = local
callbacks_enabled = ansible.posix.timer,ansible.posix.profile_tasks
HERE
}

write_inventories () {
    local os_group_name=$1
    local ansible_python_interpreter=${2:-$(which python3)}

    mkdir -p /etc/ansible/inventories
    cat >/etc/ansible/inventories/localhost <<HERE
localhost

[$os_group_name]
localhost

[$os_group_name:vars]
ansible_python_interpreter=$ansible_python_interpreter
HERE
}

write_dockerfile () {
    local upstream_registry=$1
    local upstream_namespace=$2
    local upstream_repo=$3

    local os=$4
    local os_ver=$5

    local fq_upstream=${upstream_registry}/${upstream_namespace}/${upstream_repo}:${os_ver}
    if [ "${upstream_namespace}" = "" ];
    then
        fq_upstream=${upstream_registry}/${upstream_repo}:${os_ver}
    fi

    dockerfile=Dockerfile.${os}_${os_ver}
    echo writing Dockerfile: $dockerfile
    cat > $dockerfile <<EOF
FROM $fq_upstream
MAINTAINER "Andrew Rothstein" andrew.rothstein@gmail.com

ADD ansible-install-lib ansible-install-lib
ADD install.sh install.sh
ADD requirements.yml requirements.yml
RUN ./install.sh ${os} ${os_ver}
EOF
}

write_dockerfile_simple () {
    local os=$1
    local os_ver=$2
    write_dockerfile docker.io library $os $os $os_ver
}

write_dockerfile_alpine () {
    write_dockerfile_simple alpine $1
}

write_dockerfile_archlinux () {
    write_dockerfile_simple archlinux $1
}

write_dockerfile_rockylinux () {
    write_dockerfile_simple rockylinux $1
}

write_dockerfile_debian () {
    write_dockerfile_simple debian $1
}

write_dockerfile_ubuntu () {
    write_dockerfile_simple ubuntu $1
}

write_dockerfile_fedora () {
    write_dockerfile_simple fedora $1
}

get_pip () {
    local url=https://bootstrap.pypa.io/get-pip.py
    local getpippy=/tmp/get-pip.py

    echo downloading from $url to $getpippy...
    wget -O $getpippy $url

    echo installing with $python_interpreter...
    python3 $getpippy
    rm $getpippy
}

_install_dnf () {
    local os=$1

    dnf_up
    dnf_install \
        wget \
        systemd \
        python3 \
        python3-pip \
        which

    pip_install pip
    pip_install ansible

    dnf_clean

    write_local_cfg
    write_inventories $os
    ansible_ping_localhost
}

install_fedora () {
    _install_dnf fedora
}

install_rockylinux () {
    _install_dnf rockylinux
}

install_archlinux () {
    pacman_install \
        which \
        glibc \
        python \
        ca-certificates \
        libffi \
        python-pip

    pip_install pip
    pip_install ansible

    pacman_clean

    write_local_cfg
    write_inventories archlinux
    ansible_ping_localhost
}

install_apt_python_pip() {
    apt_install \
        python3 \
        python3-distutils \
        python3-pip
    pip_install ansible
}

install_ubuntu () {

    apt_up
    apt_install \
        wget \
        language-pack-en

    install_apt_python_pip
    apt_clean

    write_local_cfg
    write_inventories ubuntu
    ansible_ping_localhost
}

install_debian () {
    local os_ver=$1

    apt_up
    apt_install \
        wget

    if [ "${os_ver}" != "bookworm" ];
    then
        install_apt_python_pip
    else
        apt_install ansible
    fi

    apt_clean

    write_local_cfg
    write_inventories debian
    ansible_ping_localhost
}

install_alpine () {
    apk_up
    apk_add \
        python3 \
        python3-dev \
        build-base \
        libffi-dev \
        openssl-dev \
        wget \
        ca-certificates \
        rust \
        cargo

    get_pip
    pip_install ansible

    apk_del \
        build-base \
        libffi-dev \
        openssl-dev \
        rust \
        cargo
    apk_clean

    write_local_cfg
    write_inventories alpine
    ansible_ping_localhost
}

docker_build_and_tag() {
    local df=$1
    local n=$2
    local t=$3
    docker build \
           -f $df \
           --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY \
           --build-arg http_proxy --build-arg https_proxy --build-arg no_proxy \
           -t $n \
           .
    docker tag $n $t
}

buildah_build_and_tag() {
    local df=$1
    local n=$2
    local t=$3
    sudo \
        buildah \
        bud \
        -f $df \
        --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY \
        --build-arg http_proxy --build-arg https_proxy --build-arg no_proxy \
        -t $n \
        .

    sudo \
        buildah \
        tag \
        $n $t
}
