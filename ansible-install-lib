#!/bin/sh

# useful package manager functions
pacman_install() {
    pacman \
        -Syu \
        --noconfirm \
        $@
}

pacman_clean() {
    pacman -Sc
}

dnf_install() {
    dnf install -y $@
}

dnf_up() {
    dnf update -y
}

dnf_clean() {
    dnf clean all
}

dnf_remove() {
    dnf remove -y $@
}

_apt() {
    DEBIAN_FRONTEND=noninteractive apt $@
}

apt_install() {
    _apt install -y $@
}

apt_remove() {
    _apt remove -y $@
}

apt_up() {
    _apt update -y
    _apt upgrade -y
}

apt_clean() {
    DEBIAN_FRONTEND=noninteractive apt-get clean -y
}

apk_add () {
    apk add $@
}

apk_del () {
    apk del $@
}

apk_clean () {
    rm -rf /var/cache/apk/*
}

apk_up () {
    apk update
    apk upgrade
}

pip_install () {
    python3 \
        -m pip \
        install \
        --no-cache-dir \
        --upgrade \
        $@
}

ansible_ping_localhost () {
    ansible-galaxy install -r requirements.yml
    ansible --version \
        && ansible all --list-hosts \
        && ansible localhost -m ping
}

write_local_cfg () {
    mkdir -p /etc/ansible
    cat >/etc/ansible/ansible.cfg <<HERE
[defaults]
inventory = /etc/ansible/inventories
transport = local
callbacks_enabled = ansible.posix.timer,ansible.posix.profile_tasks
HERE
}

write_inventories () {
    local os_group_name=$1
    local ansible_python_interpreter=${2:-$(which python3)}

    mkdir -p /etc/ansible/inventories
    cat >/etc/ansible/inventories/localhost <<HERE
localhost

[$os_group_name]
localhost

[$os_group_name:vars]
ansible_python_interpreter=$ansible_python_interpreter
HERE
}

get_pip () {
    local url=https://bootstrap.pypa.io/get-pip.py
    local getpippy=/tmp/get-pip.py

    echo downloading from $url to $getpippy...
    wget -O $getpippy $url
    python3 $getpippy
    rm $getpippy
}

_install_dnf () {
    local os=$1

    dnf_up
    dnf_install \
        wget \
        systemd \
        python3 \
        python3-pip \
        which

    pip_install pip
    pip_install ansible

    dnf_clean

    write_local_cfg
    write_inventories $os
    ansible_ping_localhost
}

install_fedora () {
    _install_dnf fedora
}

install_rockylinux () {
    _install_dnf rockylinux
}

install_archlinux () {
    pacman_install \
        which \
        glibc \
        python \
        ca-certificates \
        libffi \
        ansible

    pacman_clean

    write_local_cfg
    write_inventories archlinux
    ansible_ping_localhost
}

install_apt_python_pip() {
    apt_install \
        python3 \
        python3-distutils \
        python3-pip
    pip_install ansible
}

install_ubuntu () {

    apt_up
    apt_install \
        wget \
        language-pack-en

    install_apt_python_pip
    apt_clean

    write_local_cfg
    write_inventories ubuntu
    ansible_ping_localhost
}

install_debian () {
    local os_ver=$1

    apt_up
    apt_install \
        wget

    if [ "${os_ver}" != "bookworm" ];
    then
        install_apt_python_pip
    else
        apt_install ansible
    fi

    apt_clean

    write_local_cfg
    write_inventories debian
    ansible_ping_localhost
}

install_alpine () {
    apk_up
    apk_add wget \
        ca-certificates \
        ansible

    apk_clean

    write_local_cfg
    write_inventories alpine
    ansible_ping_localhost
}
